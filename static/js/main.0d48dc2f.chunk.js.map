{"version":3,"sources":["Context.js","components/layouts/Home.js","components/dashboard/Table.js","components/dashboard/EmailTables.js","components/dashboard/Tables.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","reorder","payload","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","tablesData","columns","Header","id","maxWidth","filterable","Cell","row","react_default","a","createElement","viewIndex","accessor","filterMethod","filter","rows","matchSorter","value","keys","filterAll","threshold","rankings","EQUAL","columns1","Allcolumns","sortable","dispatch","setState","makeData","data","map","email","index1","indexOf","index2","cell","substring","inherits","createClass","key","order","JSON","parse","localStorage","getItem","undefined","props","children","Component","Consumer","Home","emails","province","showModal","document","getElementById","style","display","closeModal","modal","errorMsg","handleChange","e","defineProperty","target","name","onSubmitData","preventDefault","_this$state","title","marginBottom","setItem","stringify","history","push","_this2","className","onClick","Link","to","onSubmit","bind","onChange","Table","es","defaultFilterMethod","String","defaultPageSize","EmailTables","Table_Table","Tables","console","log","App","Context_Provider","HashRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d48dc2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport data from './model/data.json';\r\nimport matchSorter from 'match-sorter'\r\n\r\n\r\nconst Context = React.createContext({})\r\n\r\nconst reducer = (state, action) =>{\r\n    switch(action.type){\r\n        case 'UPDATE_TABLES':\r\n            //to check if order changed on not\r\n            return {\r\n                ...state,\r\n                reorder:action.payload\r\n            }\r\n     \r\n        default: \r\n            return state;    \r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    \r\n    state = {\r\n        tablesData: [],\r\n        reorder: '',\r\n        columns: [\r\n            {\r\n            Header: \"\",\r\n            id: \"row\",\r\n            maxWidth: 50,\r\n            filterable: false,\r\n            Cell: (row) => {\r\n                return <div>{row.viewIndex+1}</div>;\r\n            }\r\n            }, \r\n            {\r\n              Header:'Email',\r\n              accessor: 'email',\r\n              filterable: false\r\n            },\r\n            {\r\n            Header:'Province',\r\n            accessor: 'province',\r\n            filterMethod: (filter, rows) =>\r\n                    matchSorter(rows, filter.value, { keys: [\"province\"] }),\r\n            filterAll: true,\r\n            \r\n            },{\r\n            Header: 'EMail Service',\r\n            accessor: 'service',\r\n            filterMethod: (filter, rows) =>\r\n                    matchSorter(rows, filter.value, {threshold: matchSorter.rankings.EQUAL, keys: [\"service\"] }),\r\n            filterAll: true,\r\n            }\r\n        ],\r\n        columns1: [\r\n            {\r\n            Header: \"\",\r\n            id: \"row\",\r\n            maxWidth: 50,\r\n            filterable: false,\r\n            Cell: (row) => {\r\n                return <div>{row.viewIndex+1}</div>;\r\n            }\r\n            }, \r\n            {\r\n            Header:'Province',\r\n            accessor: 'province',\r\n            filterMethod: (filter, rows) =>\r\n                    matchSorter(rows, filter.value, { keys: [\"province\"] }),\r\n            filterAll: true,\r\n            \r\n            },\r\n            {\r\n            Header:'Email',\r\n            accessor: 'email',\r\n            filterable: false\r\n            },\r\n            {\r\n            Header: 'EMail Service',\r\n            accessor: 'service',\r\n            filterMethod: (filter, rows) =>\r\n                    matchSorter(rows, filter.value, {threshold: matchSorter.rankings.EQUAL, keys: [\"service\"] }),\r\n            filterAll: true,\r\n            }\r\n        ], \r\n        Allcolumns:[{\r\n            Header:'Address',\r\n            accessor: 'address',\r\n            sortable: false,\r\n            filterable: false\r\n            }, {\r\n            Header:'City',\r\n            accessor: 'city',\r\n            sortable: false,\r\n            filterMethod: (filter, rows) =>\r\n                    matchSorter(rows, filter.value, { keys: [\"city\"] }),\r\n            filterAll: true,\r\n            }, {\r\n            Header:'Company',\r\n            accessor: 'company_name',\r\n            sortable: false,\r\n            filterable: false\r\n            }, {\r\n            Header:'Email',\r\n            accessor: 'email',\r\n            sortable: false,\r\n            filterable: false  \r\n            }, {\r\n            Header:'First Name',\r\n            accessor: 'first_name',\r\n            filterMethod: (filter, rows) =>\r\n                    matchSorter(rows, filter.value, { keys: [\"first_name\"] }),\r\n            filterAll: true,\r\n            }, {\r\n            Header:'Last Name',\r\n            accessor: 'last_name',\r\n            filterMethod: (filter, rows) =>\r\n                    matchSorter(rows, filter.value, { keys: [\"last_name\"] }),\r\n            filterAll: true,  \r\n            }, {\r\n            Header:'Phone1',\r\n            accessor: 'phone1',\r\n            sortable: false,\r\n            filterable: false\r\n            }, {\r\n            Header:'Phone2',\r\n            accessor: 'phone2',\r\n            sortable: false,\r\n            filterable: false\r\n            }, {\r\n            Header:'Postal',\r\n            accessor: 'postal',\r\n            sortable: false,\r\n            filterable: false \r\n            }, {\r\n            Header:'Province',\r\n            accessor: 'province'\r\n            }, {\r\n            Header:'Website',\r\n            accessor: 'web' ,\r\n            sortable: false,\r\n            filterable: false\r\n            }\r\n        ],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    }\r\n\r\n    makeData = () => {\r\n\r\n        return data.map((row) => {\r\n            let value = row.email\r\n            let index1 = value.indexOf('@')+1\r\n            let index2 = value.indexOf('.', index1)\r\n            let cell = value.substring(index1, index2)\r\n            if(cell === 'gmail' || cell === 'yahoo' || cell === 'aol'){\r\n                row['service'] = cell\r\n            } else {\r\n                row['service'] = 'other'\r\n            }\r\n            \r\n            return row\r\n        })\r\n    }\r\n\r\n    componentDidMount () {\r\n        //get data from the local file \r\n        let data = this.makeData()\r\n        //get order from local storage\r\n        let order = JSON.parse(localStorage.getItem('order')) \r\n        if(data !== undefined){\r\n            this.setState({\r\n                tablesData:data,\r\n                reorder: order.reorder\r\n            })\r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider> \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {Consumer} from '../../Context';\r\n\r\n\r\nclass Home extends Component {\r\n\r\n  state={\r\n    emails: \"1\",\r\n    province:\"2\",\r\n  }\r\n\r\n  showModal = () =>{\r\n    //when click show modal\r\n    let modal = document.getElementById('tables-modal')\r\n    modal.style.display = \"block\";\r\n  }\r\n\r\n  closeModal = () =>{\r\n    //when click close modal\r\n    let modal = document.getElementById('tables-modal')\r\n    let errorMsg = document.getElementById('errors')\r\n    modal.style.display = \"none\";\r\n    errorMsg.style.display = 'none';\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({[e.target.name]: e.target.value})\r\n  }\r\n\r\n  onSubmitData = (dispatch, e) =>{\r\n\r\n    e.preventDefault();\r\n    const{emails, province} = this.state;\r\n    let errorMsg = document.getElementById('errors');\r\n    let title = document.getElementById('title')\r\n\r\n    if(emails === province){\r\n      //when client chooses same order:\r\n      errorMsg.style.display = 'block'\r\n      title.style.marginBottom = '20px'\r\n    } else if(emails > province){\r\n      //when the table default rder change update state\r\n      dispatch({type: \"UPDATE_TABLES\", payload: true});\r\n      localStorage.setItem('order', JSON.stringify({reorder:true}))\r\n      this.props.history.push('/api/emailtables');\r\n    }\r\n    else if (emails < province){\r\n      dispatch({type: \"UPDATE_TABLES\", payload: false});\r\n      localStorage.setItem('order', JSON.stringify({reorder:false}))\r\n      this.props.history.push('/api/emailtables');\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n    <Consumer>\r\n      {value =>{\r\n        const {dispatch} = value\r\n        return(\r\n          <div className=\"container\">\r\n            <div className=\"cover-text\">\r\n              <div className=\"text-container\">\r\n                  <h4 className=\"text1\">Inspire your data</h4>\r\n                  <h1 className=\"text2\">Welcome To Show Tables</h1>\r\n                  <h4 className=\"text4\">Show Tables</h4>\r\n                  <h3 className=\"text3\">Start with us</h3>\r\n              </div>\r\n              <div className=\"button-container\">\r\n                  <button className=\"btn-tables\" onClick={this.showModal}>Show Emails</button>\r\n                  <button className=\"btn-emails\"><Link to='/api/alltables' className=\"nav-link\">All Data</Link> </button>\r\n              </div>\r\n            </div>\r\n            <div id=\"tables-modal\" className=\"modal\">\r\n              <div className=\"modal-content\">\r\n                \r\n                <h2 className=\"modal-title\" id=\"title\">Select columns order <span className=\"close\" onClick={this.closeModal}>&times;</span></h2>\r\n                \r\n                <form onSubmit = {this.onSubmitData.bind(this, dispatch)}>\r\n                <p className=\"error-msg\" id=\"errors\">Please select different columns!</p>\r\n                  <label className=\"columns-label\">\r\n                  Emails column:\r\n                    <select className=\"select-box\" name =\"emails\" value={this.state.emails} onChange={this.handleChange}>\r\n                      <option value=\"1\" > 1 </option>\r\n                      <option value=\"2\"> 2 </option>\r\n                    </select>\r\n                  </label>\r\n                  <label className=\"columns-label\">\r\n                  Province column:\r\n                    <select className=\"select-box\" name =\"province\" value={this.state.province} onChange={this.handleChange}>\r\n                      <option value=\"1\"> 1 </option>\r\n                      <option value=\"2\" > 2 </option>\r\n                    </select>\r\n                  </label>\r\n                  <div className=\"button-warrper\"><input type=\"submit\" value=\"OK\" className=\"ok-button\" /></div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }}\r\n    </Consumer>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default Home","\r\nimport React, { Component } from 'react';\r\nimport {Consumer} from '../../Context';\r\nimport ReactTable from 'react-table';\r\nimport './table.css'\r\n\r\nexport default class Table extends Component {\r\n    \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Consumer>\r\n            {value => {\r\n                const {tablesData} = value;\r\n                return(\r\n                    <div>\r\n                       <ReactTable\r\n                            data={tablesData}\r\n                            defaultFilterMethod = {\r\n                                (filter, row) => String(row[filter.id] === filter.value)\r\n                            }\r\n                            columns={this.props.columns}\r\n                            filterable\r\n                            defaultPageSize={15}\r\n                            className=\"-striped -highlight tables\"   \r\n                        >\r\n                        </ReactTable>:\r\n                   </div>\r\n                )\r\n            }}\r\n        </Consumer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {Consumer} from '../../Context';\r\nimport 'react-table/react-table.css';\r\nimport Table from './Table'\r\n\r\nclass EmailTables extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <Consumer>\r\n            {value => {\r\n                const{reorder, columns, columns1} = value\r\n                return(\r\n                    <div>\r\n                    {reorder === false? <Table columns={columns}/>: <Table columns={columns1}/>}\r\n                    </div>\r\n                )\r\n            }}\r\n        </Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EmailTables\r\n\r\n","import React, { Component } from 'react'\r\nimport {Consumer} from '../../Context';\r\nimport Table from '../dashboard/Table'\r\n\r\nexport default class Tables extends Component {\r\n  render() {\r\n    return (\r\n        <Consumer>\r\n            {value => {\r\n                const {Allcolumns} = value\r\n                console.log(Allcolumns)\r\n                return(\r\n                  <Table columns = {Allcolumns}/>\r\n                )\r\n            }}\r\n        </Consumer>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport {Provider} from './Context';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport Home from './components/layouts/Home';\nimport EmailTables from './components/dashboard/EmailTables';\nimport Tables from './components/dashboard/Tables'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <div className=\"App\">\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/api/emailtables\" component={EmailTables} />\n              <Route exact path=\"/api/alltables\" component={Tables} />\n            </Switch>\n          </Router>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}